================================================================================
= This files contains general design notes on the analysis software for MuSIC  =
= run 2. The aim of this is to make a modular design that can be used for      = 
= basic run time plotting as well as more in depth analysis                    =
= S cook 01-02-2011                                                            =
================================================================================

AIMS:
- for monitoring:
    + @ start - input intensity/current scalar
    + @ start - calibration data
    + real time updates to ADC data plots
    + real time removal of pedistal etc
    + Current beam profile plot
    + prompt for next step of procedure - stage + notes for log
        > Hit rate & intensity (off)
        > Hit rate & intensity (on)
        > Pedestal
            * Which run No. to use?
        > Data
            * Which run No. to use?
        > Hit rate & intensity (on)
        > Hit rate & intensity (off)
        > Next position

- Analysis
    + Calculate normalised hit rate per proton
    + Energy deposited per hit
        > possibly PID?
    + Energy distribution/profile
    
================================================================================

1 Basic read in + record 
2 Read in modes (pedestal, normal)
3 Real time display
4 Prompts
5 Add start inputs (rather than hard code etc)

packet = <head><u16 nwords><u16 data><u16 status>

================================================================================

main
    writer (file, histo)
        + make histo a class variable?
        calibration (file, input energies)?
            + first version: request bin->energy pairs
            + upgrade: root method of finding inflection point .: energy:bin relation
            + should only be run once and values saved - file, pickle?
            + possibly move into writer?
            + write TH1* wrapper class that is called with a name and a list of numbers?
    while()
        popup/request for hit rate/intensity (on & off)
            + look at adding into CAMAC?
        new_file(name, start_number = 0)
            + class variable to inc suffix
            + optional header (position, time/date, N_events, notes? comment character?)
        readin (file) -> pedestal
            + use the writer as a file - only needs to implment file.write()
        readin (file) -> event
        popup/request hit rate/intensity on & off
            + as above
